 // add_product
    public function add_product(Request $request)
    {

        $product = new Product();
        $product->category_id = $request->category;
        $product->name = $request->name;
        $product->slug = $request->slug;
        $product->description = $request->description;
        $product->long_description = $request->lomg_description;


        $image = $request->file('image');
        if ($image) {
            $main_image_name = time() . '.' . $image->getClientOriginalExtension();
            $image->move(public_path('uploads/products'), $main_image_name);
            $product->main_image = $main_image_name;
        }

        $gallery = [];
        if ($request->hasFile('gallery')) {
            foreach ($request->file('gallery') as $image) {
                $name = time() . '.' . $image->getClientOriginalExtension();
                $image->move(public_path('uploads/products'), $name);
                $gallery[] = $name;
            }
            $product->gallery = $gallery;
        }

        $product->price = $request->price;




        $product->save();

        // Iterate over the attribute names and values
        foreach ($request->attribute_name as $index => $name) {
            $attribute = new Attribute();
            $attribute->product_id = $product->id;
            $attribute->name = $name;
            $attribute->save();


            if (isset($request->attribute_values[$index])) {
                // If you have values for this attribute, save them
                foreach (explode(',', $request->attribute_values[$index]) as $value) {

                    $attributeValues = new AttributeValue();
                    $attributeValues->attribute_id = $attribute->id;
                    $attributeValues->value = $value;
                    $attributeValues->save();
                }
            }
        }

        if (count($request->attribute_values) > 0 && count($request->attribute_values) > 0) {
            $combinations = $this->generateCombinations($request->attribute_values);
            foreach ($combinations as $combination) {
                $variation = new Variation();
                $variation->product_id = $product->id;
                $variation->name = implode(' | ', $combination);
                $variation->value = implode(' | ', $combination);
                $variation->price = $request->price_variant[0];  // Assuming 1 price per combination
                $variation->sale_price = $request->sale_price_variant[0] ?? null;
                $variation->stock = $request->stock_variant[0] ?? 0;
                $variation->save();

                // Handle image upload if provided
                if ($request->hasFile('image_variant')) {
                    $imagePath = $request->file('image_variant')[0]->store('product_variations');
                    $variation->image = $imagePath;
                    $variation->save();
                }
            }
        };




        return redirect()->back();
    }


    // Helper function to generate combinations from attribute values
    private function generateCombinations($attributeValues)
    {
        $values = [];
        foreach ($attributeValues as $value) {
            $values[] = explode(',', $value);
        }
        return $this->cartesianProduct($values);
    }



    private function cartesianProduct($arrays)
    {
        return array_reduce($arrays, function ($a, $b) {
            return array_merge(...array_map(function ($x) use ($b) {
                return array_map(function ($y) use ($x) {
                    return array_merge((array)$x, (array)$y);
                }, $b);
            }, $a));
        }, [[]]);
    }